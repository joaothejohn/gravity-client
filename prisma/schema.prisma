generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isAdmin       Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  accounts      Account[]
  invitations   Invitation[]
  sessions      Session[]
  teamMembers   TeamMember[]
  domainId      String?
  domain        Domain?      @relation(fields: [domainId], references: [id])
}

model RadiusUser {
  id       String  @id @default(uuid())
  username String
  password String
  ip       String
  isActive Boolean @default(false)
  domainId String
  domain   Domain? @relation(fields: [domainId], references: [id])
  planId   String?
  plan     Plan?   @relation(fields: [planId], references: [id])
}

model Plan {
  id             String       @id @default(uuid())
  name           String
  maxLimit       String
  limitAt        String
  priority       String
  burstLimit     String?
  burstThreshold String?
  burstTime      String?
  domainId       String
  domain         Domain?      @relation(fields: [domainId], references: [id])
  radiusUser     RadiusUser[]
}

model Domain {
  id           String         @id @default(uuid())
  name         String
  radiusUsers  RadiusUser[]
  userPlans    Plan[]
  user         User[]
  domainRouter DomainRouter[]
  Team         Team[]
}

model DomainRouter {
  id       String @id @default(uuid())
  name     String
  ip       String
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id])
}

model Team {
  id          String       @id @default(uuid())
  name        String
  slug        String       @unique
  domainId    String
  domain      Domain?      @relation(fields: [domainId], references: [id])
  defaultRole Role         @default(MEMBER)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  apiKeys     ApiKey[]
  invitations Invitation[]
  members     TeamMember[]
}

model TeamMember {
  id        String   @id @default(uuid())
  teamId    String
  userId    String
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@index([userId])
}

model Invitation {
  id        String   @id @default(uuid())
  teamId    String
  email     String
  role      Role     @default(MEMBER)
  token     String   @unique
  expires   DateTime
  invitedBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [invitedBy], references: [id], onDelete: Cascade)
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, email])
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model ApiKey {
  id         String    @id @default(uuid())
  name       String
  teamId     String
  hashedKey  String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now())
  expiresAt  DateTime?
  lastUsedAt DateTime?
  team       Team      @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  OWNER
  MEMBER
  SUPER_ADMIN
}
